{"version":3,"sources":["webpack:///7.acc824e7ff7d6096b328.chunk.js","webpack:///./src/app/chartlib/chartlib.module.ts","webpack:///./~/ng2-charts/components/charts/charts.js?54ca","webpack:///./~/ng2-charts/ng2-charts.js?1b18","webpack:///./src/app/chartlib/chartlib.component.ts","webpack:///./src/app/chartlib/chartlib.routing.ts","webpack:///./src/app/chartlib/chartlib.component.scss","webpack:///./src/app/chartlib/chartlib.component.html"],"names":["webpackJsonp","1172","module","exports","__webpack_require__","__WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1__angular_router__","__WEBPACK_IMPORTED_MODULE_2__angular_common__","__WEBPACK_IMPORTED_MODULE_3__angular_material__","__WEBPACK_IMPORTED_MODULE_4__angular_flex_layout__","__WEBPACK_IMPORTED_MODULE_5_ng2_charts_ng2_charts__","__WEBPACK_IMPORTED_MODULE_6__chartlib_component__","n","__WEBPACK_IMPORTED_MODULE_7__chartlib_routing__","d","ChartlibModule","__decorate","this","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","imports","forChild","declarations","1221","rgba","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","formatLineColor","colors","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","formatBarColor","hoverBackgroundColor","hoverBorderColor","formatPieColors","map","color","formatPolarAreaColors","getRandomColor","generateColor","index","BaseChartDirective","defaultColors","generateColors","count","colorsArr","Array","getColors","chartType","core_1","element","labels","options","chartClick","EventEmitter","chartHover","initFlag","prototype","ngOnInit","ctx","nativeElement","getContext","cvs","data","datasets","refresh","ngOnChanges","changes","hasOwnProperty","chart","getDatasets","update","ngOnDestroy","destroy","getChartBuilder","_this","assign","legend","display","hover","onHover","active","emit","onClick","event","opts","type","Chart","Error","isArray","label","elm","newElm","Directive","args","selector","exportAs","ctorParameters","ElementRef","propDecorators","Input","Output","ChartsModule","NgModule","1222","__export","m","p","1229","ChartlibComponent","globalChartOptions","responsive","position","barChartLabels","barChartType","barChartLegend","barChartData","borderWidth","barChartOptions","scaleShowVerticalLines","scales","xAxes","gridLines","zeroLineColor","yAxes","ticks","beginAtZero","suggestedMax","barChartHorizontalType","barChartHorizontalOptions","barChartStackedOptions","tooltips","mode","intersect","stacked","doughnutChartColors","doughnutChartLabels","doughnutChartData","doughnutChartType","doughnutOptions","elements","arc","lineChartData","lineChartLabels","lineChartOptions","animation","lineChartColors","lineChartLegend","lineChartType","lineChartSteppedData","fill","steppedLine","lineChartPointsData","pointRadius","pointHoverRadius","showLine","lineChartPointsOptions","point","pointStyle","bubbleChartData","x","y","bubbleChartType","ComboChartData","ComboChartLabels","ComboChartOptions","pieChartLabels","pieChartData","pieChartType","polarAreaChartLabels","polarAreaChartData","polarAreaLegend","polarAreaChartType","radarChartLabels","radarChartData","radarChartType","template","styles","1250","__WEBPACK_IMPORTED_MODULE_0__chartlib_component__","ChartlibRoutes","path","component","1285","1296"],"mappings":"AAAAA,cAAc,EAAE,KAEVC,KACA,SAASC,EAAQC,EAASC,GAEhC,YACqB,IAAIC,GAA8CD,EAAoB,GAClEE,EAAgDF,EAAoB,KACpEG,EAAgDH,EAAoB,IACpEI,EAAkDJ,EAAoB,KACtEK,EAAqDL,EAAoB,KACzEM,EAAsDN,EAAoB,MAE1EO,GAD8DP,EAAoBQ,EAAEF,GAChCN,EAAoB,OACxES,EAAkDT,EAAoB,KAChEA,GAAoBU,EAAEX,EAAS,iBAAkB,WAAa,MAAOY,IACpG,IAAIC,GAAcC,MAAQA,KAAKD,YAAe,SAAUE,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HP,GAAvHQ,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOK,OAAOC,yBAAyBR,EAAQC,GAAOC,CACrH,IAAuB,gBAAZO,UAAoD,kBAArBA,SAAQC,SAAyBJ,EAAIG,QAAQC,SAASX,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIS,GAAIZ,EAAWM,OAAS,EAAGM,GAAK,EAAGA,KAAShB,EAAII,EAAWY,MAAIL,GAAKH,EAAI,EAAIR,EAAEW,GAAKH,EAAI,EAAIR,EAAEK,EAAQC,EAAKK,GAAKX,EAAEK,EAAQC,KAASK,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOK,eAAeZ,EAAQC,EAAKK,GAAIA,GAE5DO,EAAcf,MAAQA,KAAKe,YAAe,SAAUC,EAAGC,GACvD,GAAuB,gBAAZN,UAAoD,kBAArBA,SAAQO,SAAyB,MAAOP,SAAQO,SAASF,EAAGC,ICR1GnB,EAAA,mBAAAA,MAA6B,MAL7BA,GAAAC,GAACZ,EAAA0B,EAAAzB,EAAA,WACC+B,SAAU7B,EAAA,aAAcD,EAAA,EAAa+B,SAASxB,EAAA,GAAiBH,EAAA,aAAcF,EAAA,aAAcC,EAAA,GAC3F6B,cAAe3B,EAAA,KD6BTqB,EAAW,yBACZjB,OAODwB,KACA,SAASrC,EAAQC,EAASC,GAEhC,YEkGA,SAAAoC,GAAAC,EAAAC,GACA,cAAAD,EAAAE,OAAAD,GAAAE,KAAA,SAEA,QAAAC,GAAAC,EAAAC,GACA,MAAAC,MAAAC,MAAAD,KAAAE,UAAAH,EAAAD,EAAA,IAAAA,EAEA,QAAAK,GAAAC,GACA,OACAC,gBAAAb,EAAAY,EAAA,IACAE,YAAAd,EAAAY,EAAA,GACAG,qBAAAf,EAAAY,EAAA,GACAI,iBAAA,OACAC,0BAAA,OACAC,sBAAAlB,EAAAY,EAAA,KAGA,QAAAO,GAAAP,GACA,OACAC,gBAAAb,EAAAY,EAAA,IACAE,YAAAd,EAAAY,EAAA,GACAQ,qBAAApB,EAAAY,EAAA,IACAS,iBAAArB,EAAAY,EAAA,IAGA,QAAAU,GAAAV,GACA,OACAC,gBAAAD,EAAAW,IAAA,SAAAC,GAAsD,MAAAxB,GAAAwB,EAAA,MACtDV,YAAAF,EAAAW,IAAA,WAA6C,eAC7CR,qBAAAH,EAAAW,IAAA,SAAAC,GAA2D,MAAAxB,GAAAwB,EAAA,KAC3DR,iBAAAJ,EAAAW,IAAA,WAAkD,eAClDN,0BAAAL,EAAAW,IAAA,SAAAC,GAAgE,MAAAxB,GAAAwB,EAAA,KAChEN,sBAAAN,EAAAW,IAAA,SAAAC,GAA4D,MAAAxB,GAAAwB,EAAA,MAG5D,QAAAC,GAAAb,GACA,OACAC,gBAAAD,EAAAW,IAAA,SAAAC,GAAsD,MAAAxB,GAAAwB,EAAA,MACtDV,YAAAF,EAAAW,IAAA,SAAAC,GAAkD,MAAAxB,GAAAwB,EAAA,KAClDJ,qBAAAR,EAAAW,IAAA,SAAAC,GAA2D,MAAAxB,GAAAwB,EAAA,MAC3DH,iBAAAT,EAAAW,IAAA,SAAAC,GAAuD,MAAAxB,GAAAwB,EAAA,MAGvD,QAAAE,KACA,OAAArB,EAAA,OAAAA,EAAA,OAAAA,EAAA,QAOA,QAAAsB,GAAAC,GACA,MAAAC,GAAAC,cAAAF,IAAAF,IAOA,QAAAK,GAAAC,GAEA,OADAC,GAAA,GAAAC,OAAAF,GACA1C,EAAA,EAAmBA,EAAA0C,EAAW1C,IAC9B2C,EAAA3C,GAAAuC,EAAAC,cAAAxC,IAAAoC,GAEA,OAAAO,GASA,QAAAE,GAAAC,EAAAR,EAAAI,GACA,cAAAI,GAAA,aAAAA,EACAd,EAAAS,EAAAC,IAEA,cAAAI,EACAX,EAAAM,EAAAC,IAEA,SAAAI,GAAA,UAAAA,EACAzB,EAAAgB,EAAAC,IAEA,QAAAQ,GAAA,kBAAAA,EACAjB,EAAAQ,EAAAC,IAEAD,EAAAC,GA1OA,GAAAS,GAAAzE,EAAA,GAEAiE,EAAA,WACA,QAAAA,GAAAS,GACA7D,KAAA8D,UACA9D,KAAA+D,WACA/D,KAAAgE,WAAA,GAAAJ,GAAAK,aACAjE,KAAAkE,WAAA,GAAAN,GAAAK,aACAjE,KAAAmE,UAAA,EACAnE,KAAA6D,UAyIA,MAvIAT,GAAAgB,UAAAC,SAAA,WACArE,KAAAsE,IAAAtE,KAAA6D,QAAAU,cAAAC,WAAA,MACAxE,KAAAyE,IAAAzE,KAAA6D,QAAAU,cACAvE,KAAAmE,UAAA,GACAnE,KAAA0E,MAAA1E,KAAA2E,WACA3E,KAAA4E,WAGAxB,EAAAgB,UAAAS,YAAA,SAAAC,GACA9E,KAAAmE,WAEAW,EAAAC,eAAA,SAAAD,EAAAC,eAAA,aAAAD,EAAAC,eAAA,WACA/E,KAAAgF,MAAAN,KAAAC,SAAA3E,KAAAiF,cACAjF,KAAAgF,MAAAN,KAAAZ,OAAA9D,KAAA8D,OACA9D,KAAAgF,MAAAE,UAGAlF,KAAA4E,YAIAxB,EAAAgB,UAAAe,YAAA,WACAnF,KAAAgF,QACAhF,KAAAgF,MAAAI,UACApF,KAAAgF,MAAA,SAGA5B,EAAAgB,UAAAiB,gBAAA,SAAAf,GACA,GAAAgB,GAAAtF,KACA2E,EAAA3E,KAAAiF,cACAlB,EAAAtD,OAAA8E,UAAsCvF,KAAA+D,QACtC/D,MAAAwF,UAAA,IACAzB,EAAAyB,QAA8BC,SAAA,IAG9B1B,EAAA2B,MAAA3B,EAAA2B,UACA3B,EAAA2B,MAAAC,UACA5B,EAAA2B,MAAAC,QAAA,SAAAC,GACAA,MAAArF,QAGA+E,EAAApB,WAAA2B,MAAuCD,aAGvC7B,EAAA+B,UACA/B,EAAA+B,QAAA,SAAAC,EAAAH,GACAN,EAAAtB,WAAA6B,MAAuCE,QAAAH,YAGvC,IAAAI,IACAC,KAAAjG,KAAA2D,UACAe,MACAZ,OAAA9D,KAAA8D,OACAa,YAEAZ,UAEA,uBAAAmC,OACA,SAAAC,OAAA,sEAEA,WAAAD,OAAA5B,EAAA0B,IAEA5C,EAAAgB,UAAAa,YAAA,WACA,GAAAK,GAAAtF,KACA2E,EAAA,MA0BA,MAxBA3E,KAAA2E,WAAA3E,KAAA2E,SAAApE,QAAAP,KAAA0E,MAAA1E,KAAA0E,KAAAnE,UAEAoE,EADAlB,MAAA2C,QAAApG,KAAA0E,KAAA,IACA1E,KAAA0E,KAAA5B,IAAA,SAAA4B,EAAAvB,GACA,OAA4BuB,OAAA2B,MAAAf,EAAAxB,OAAAX,IAAA,SAAAA,OAICuB,KAAA1E,KAAA0E,KAAA2B,MAAA,cAG7BrG,KAAA2E,UAAA3E,KAAA2E,SAAApE,QACAoE,KAAApE,UACAoE,GAAA3E,KAAA2E,aACA7B,IAAA,SAAAwD,EAAAnD,GACA,GAAAoD,GAAA9F,OAAA8E,UAA6Ce,EAO7C,OANAhB,GAAAnD,QAAAmD,EAAAnD,OAAA5B,OACAE,OAAA8E,OAAAgB,EAAAjB,EAAAnD,OAAAgB,IAGA1C,OAAA8E,OAAAgB,EAAA7C,EAAA4B,EAAA3B,UAAAR,EAAAoD,EAAA7B,KAAAnE,SAEAgG,MAGA5B,EACA,SAAAwB,OAAA,4FAAAnG,KAAA2D,UAEA,OAAAgB,IAEAvB,EAAAgB,UAAAQ,QAAA,WAKA5E,KAAAmF,cACAnF,KAAAgF,MAAAhF,KAAAqF,gBAAArF,KAAAsE,MAEAlB,EAAAC,gBACA,aACA,aACA,aACA,cACA,aACA,cACA,cACA,YACA,aACA,aACA,cACA,WAEAD,EAAAnD,aACSgG,KAAArC,EAAA4C,UAAAC,OAAiCC,SAAA,oBAAAC,SAAA,iBAG1CvD,EAAAwD,iBACSX,KAAArC,EAAAiD,aAETzD,EAAA0D,gBACApC,OAAkBuB,KAAArC,EAAAmD,QAClBpC,WAAsBsB,KAAArC,EAAAmD,QACtBjD,SAAoBmC,KAAArC,EAAAmD,QACpBhD,UAAqBkC,KAAArC,EAAAmD,QACrBpD,YAAuBsC,KAAArC,EAAAmD,QACvB5E,SAAoB8D,KAAArC,EAAAmD,QACpBvB,SAAoBS,KAAArC,EAAAmD,QACpB/C,aAAwBiC,KAAArC,EAAAoD,SACxB9C,aAAwB+B,KAAArC,EAAAoD,UAExB5D,IAEAlE,GAAAkE,oBAwFA,IAAA6D,GAAA,WACA,QAAAA,MAeA,MAbAA,GAAAhH,aACSgG,KAAArC,EAAAsD,SAAAT,OACTpF,cACA+B,GAEAlE,SACAkE,GAEAjC,eAIA8F,EAAAL,kBACAK,IAEA/H,GAAA+H,gBF0DME,KACA,SAASlI,EAAQC,EAASC,GAEhC,YG3TA,SAAAiI,GAAAC,GACA,OAAAC,KAAAD,GAAAnI,EAAA6F,eAAAuC,KAAApI,EAAAoI,GAAAD,EAAAC,IAEAF,EAAAjI,EAAA,QHkUMoI,KACA,SAAStI,EAAQC,EAASC,GAEhC,YACqB,IAAIC,GAA8CD,EAAoB,EAC5DA,GAAoBU,EAAEX,EAAS,IAAK,WAAa,MAAOsI,IACvF,IAAIzH,GAAcC,MAAQA,KAAKD,YAAe,SAAUE,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HP,GAAvHQ,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOK,OAAOC,yBAAyBR,EAAQC,GAAOC,CACrH,IAAuB,gBAAZO,UAAoD,kBAArBA,SAAQC,SAAyBJ,EAAIG,QAAQC,SAASX,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIS,GAAIZ,EAAWM,OAAS,EAAGM,GAAK,EAAGA,KAAShB,EAAII,EAAWY,MAAIL,GAAKH,EAAI,EAAIR,EAAEW,GAAKH,EAAI,EAAIR,EAAEK,EAAQC,EAAKK,GAAKX,EAAEK,EAAQC,KAASK,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOK,eAAeZ,EAAQC,EAAKK,GAAIA,GAE5DO,EAAcf,MAAQA,KAAKe,YAAe,SAAUC,EAAGC,GACvD,GAAuB,gBAAZN,UAAoD,kBAArBA,SAAQO,SAAyB,MAAOP,SAAQO,SAASF,EAAGC,II5U1GuG,EAAA,WACE,QAAAA,KACOxH,KAAAyH,oBACHC,YAAY,EACZlC,QACEC,SAAS,EACTkC,SAAU,WAKT3H,KAAA4H,gBAA4B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1D5H,KAAA6H,aAAuB,MACvB7H,KAAA8H,gBAA0B,EAC1B9H,KAAA+H,eACLrD,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,IAEbtD,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,IAERhI,KAAAiI,gBAAuBxH,OAAO8E,QACnC2C,wBAAwB,EACxBC,QACEC,QACEC,WACEtF,MAAO,mBACPuF,cAAe,sBAGnBC,QACEF,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBX,SAAU,OACVa,OACEC,aAAa,EACbC,aAAc,OAInB1I,KAAKyH,oBAGDzH,KAAA2I,uBAAiC,gBACjC3I,KAAA4I,0BAAiCnI,OAAO8E,QAC7C2C,wBAAwB,EACxBC,QACEC,QACEC,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBE,OACEC,aAAa,EACbC,aAAc,KAGlBH,QACEF,WACEtF,MAAO,mBACPuF,cAAe,wBAIpBtI,KAAKyH,oBAGDzH,KAAA6I,uBAA8BpI,OAAO8E,QAC1C2C,wBAAwB,EACxBY,UACEC,KAAM,QACNC,WAAW,GAEbtB,YAAY,EACZS,QACEC,QACEC,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBW,SAAS,EACTT,OACEC,aAAa,KAGjBF,QACEF,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBW,SAAS,MAGZjJ,KAAKyH,oBAGDzH,KAAAkJ,sBACL9G,iBAAkB,UAAW,UAAW,UAAW,UAAW,YAEzDpC,KAAAmJ,qBAAiC,iBAAkB,iBAAkB,oBACrEnJ,KAAAoJ,mBAA+B,IAAK,IAAK,KACzCpJ,KAAAqJ,kBAA4B,WAC5BrJ,KAAAsJ,gBAAuB7I,OAAO8E,QACnCgE,UACEC,KACExB,YAAa,KAGhBhI,KAAKyH,oBAGDzH,KAAAyJ,gBACL/E,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,IAEbtD,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,IAERhI,KAAA0J,iBAAkC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChE1J,KAAA2J,iBAAwBlJ,OAAO8E,QACpCqE,WAAW,EACXzB,QACEC,QACEC,WACEtF,MAAO,mBACPuF,cAAe,sBAGnBC,QACEF,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBE,OACEC,aAAa,EACbC,aAAc,OAInB1I,KAAKyH,oBACDzH,KAAA6J,kBACLzH,gBAAiB,UACjBC,YAAa,UACbC,qBAAsB,UACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,0BAEvBL,gBAAiB,UACjBC,YAAa,UACbC,qBAAsB,UACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,qBAEvBL,gBAAiB,wBACjBC,YAAa,sBACbC,qBAAsB,sBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,0BAElBzC,KAAA8J,iBAA2B,EAC3B9J,KAAA+J,cAAwB,OACxB/J,KAAAgK,uBACLtF,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,EACbiC,MAAM,EACNC,aAAa,IAEbxF,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,EACbiC,MAAM,EACNC,aAAa,IAERlK,KAAAmK,sBACLzF,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,EACbiC,MAAM,EACNG,YAAa,GACbC,iBAAkB,GAClBC,UAAU,IAEV5F,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,EACbiC,MAAM,EACNG,YAAa,GACbC,iBAAkB,GAClBC,UAAU,IAELtK,KAAAuK,uBAA8B9J,OAAO8E,QAC1C4C,QACEC,QACEC,WACEtF,MAAO,mBACPuF,cAAe,sBAGnBC,QACEF,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBE,OACEC,aAAa,EACbC,aAAc,MAIpBa,UACEiB,OACEC,WAAY,aAGfzK,KAAKyH,oBAGDzH,KAAA0K,kBACLhG,OACEiG,EAAG,EACHC,EAAG,EACHpK,EAAG,KAEHmK,EAAG,EACHC,EAAG,EACHpK,EAAG,KAEHmK,EAAG,EACHC,EAAG,EACHpK,EAAG,IAEHmK,EAAG,EACHC,EAAG,EACHpK,EAAG,IAEHmK,EAAG,EACHC,EAAG,GACHpK,EAAG,KAEHmK,EAAG,EACHC,EAAG,EACHpK,EAAG,IAEHmK,EAAG,EACHC,EAAG,EACHpK,EAAG,KAEL6F,MAAO,WACP2B,YAAa,IAERhI,KAAA6K,gBAA0B,SAG1B7K,KAAA8K,iBACLpG,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,EACb/B,KAAM,OACNgE,MAAM,IAENvF,MAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB2B,MAAO,WACP2B,YAAa,EACb/B,KAAM,QAEDjG,KAAA+K,kBAAmC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjE/K,KAAAgL,kBAAyBvK,OAAO8E,QACrCqE,WAAW,EACXzB,QACEC,QACEC,WACEtF,MAAO,mBACPuF,cAAe,sBAGnBC,QACEF,WACEtF,MAAO,mBACPuF,cAAe,oBAEjBE,OACEC,aAAa,EACbC,aAAc,OAInB1I,KAAKyH,oBAGDzH,KAAAiL,gBAA4B,iBAAkB,iBAAkB,cAChEjL,KAAAkL,cAA0B,IAAK,IAAK,KACpClL,KAAAmL,aAAuB,MAGvBnL,KAAAoL,sBAAkC,iBAAkB,iBAAkB,aAAc,YAAa,mBACjGpL,KAAAqL,oBAA2B,IAAK,IAAK,IAAK,GAAI,KAC9CrL,KAAAsL,iBAA2B,EAC3BtL,KAAAuL,mBAA6B,YAG7BvL,KAAAwL,kBAA8B,SAAU,WAAY,WAAY,YAAa,SAAU,UAAW,WAClGxL,KAAAyL,iBACL/G,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/B2B,MAAO,aAEP3B,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC/B2B,MAAO,aAEFrG,KAAA0L,eAAyB,QAClC,MApUAlE,GAAAzH,GAACZ,EAAA0B,EAAAzB,EAAA,YACCsH,SAAU,eACViF,SAAAxM,EAAA,MACAyM,QAAAzM,EAAA,SJ6oBM4B,EAAW,yBACZyG,OAODqE,KACA,SAAS5M,EAAQC,EAASC,GAEhC,YACqB,IAAI2M,GAAoD3M,EAAoB,KAClEA,GAAoBU,EAAEX,EAAS,IAAK,WAAa,MAAO6M,IK3pBhF,IAAMA,KACXC,KAAM,GACNC,UAAWH,EAAA,KLmqBPI,KACA,SAASjN,EAAQC,GM1qBvBD,EAAAC,QAAA,INgrBMiN,KACA,SAASlN,EAAQC,GOjrBvBD,EAAAC,QAAA","file":"7.acc824e7ff7d6096b328.chunk.js","sourcesContent":["webpackJsonp([7,13],{\n\n/***/ 1172:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_material__ = __webpack_require__(570);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_flex_layout__ = __webpack_require__(571);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_ng2_charts_ng2_charts__ = __webpack_require__(1222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_ng2_charts_ng2_charts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_ng2_charts_ng2_charts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__chartlib_component__ = __webpack_require__(1229);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__chartlib_routing__ = __webpack_require__(1250);\n/* harmony export (binding) */ __webpack_require__.d(exports, \"ChartlibModule\", function() { return ChartlibModule; });\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\n\n\nvar ChartlibModule = (function () {\n    function ChartlibModule() {\n    }\n    ChartlibModule = __decorate([\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"])({\n            imports: [__WEBPACK_IMPORTED_MODULE_2__angular_common__[\"CommonModule\"], __WEBPACK_IMPORTED_MODULE_1__angular_router__[\"b\" /* RouterModule */].forChild(__WEBPACK_IMPORTED_MODULE_7__chartlib_routing__[\"a\" /* ChartlibRoutes */]), __WEBPACK_IMPORTED_MODULE_5_ng2_charts_ng2_charts__[\"ChartsModule\"], __WEBPACK_IMPORTED_MODULE_3__angular_material__[\"MdCardModule\"], __WEBPACK_IMPORTED_MODULE_4__angular_flex_layout__[\"a\" /* FlexLayoutModule */]],\n            declarations: [__WEBPACK_IMPORTED_MODULE_6__chartlib_component__[\"a\" /* ChartlibComponent */]]\n        }), \n        __metadata('design:paramtypes', [])\n    ], ChartlibModule);\n    return ChartlibModule;\n}());\n//# sourceMappingURL=/Users/Shimanyi/Apps/ooscangular/app/src/chartlib.module.js.map\n\n/***/ },\n\n/***/ 1221:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar core_1 = __webpack_require__(0);\n/* tslint:disable-next-line */\nvar BaseChartDirective = (function () {\n    function BaseChartDirective(element) {\n        this.labels = [];\n        this.options = {};\n        this.chartClick = new core_1.EventEmitter();\n        this.chartHover = new core_1.EventEmitter();\n        this.initFlag = false;\n        this.element = element;\n    }\n    BaseChartDirective.prototype.ngOnInit = function () {\n        this.ctx = this.element.nativeElement.getContext('2d');\n        this.cvs = this.element.nativeElement;\n        this.initFlag = true;\n        if (this.data || this.datasets) {\n            this.refresh();\n        }\n    };\n    BaseChartDirective.prototype.ngOnChanges = function (changes) {\n        if (this.initFlag) {\n            // Check if the changes are in the data or datasets\n            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets') || changes.hasOwnProperty('labels')) {\n                this.chart.data.datasets = this.getDatasets();\n                this.chart.data.labels = this.labels;\n                this.chart.update();\n            }\n            else {\n                this.refresh();\n            }\n        }\n    };\n    BaseChartDirective.prototype.ngOnDestroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n    };\n    BaseChartDirective.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {\n        var _this = this;\n        var datasets = this.getDatasets();\n        var options = Object.assign({}, this.options);\n        if (this.legend === false) {\n            options.legend = { display: false };\n        }\n        // hock for onHover and onClick events\n        options.hover = options.hover || {};\n        if (!options.hover.onHover) {\n            options.hover.onHover = function (active) {\n                if (active && !active.length) {\n                    return;\n                }\n                _this.chartHover.emit({ active: active });\n            };\n        }\n        if (!options.onClick) {\n            options.onClick = function (event, active) {\n                _this.chartClick.emit({ event: event, active: active });\n            };\n        }\n        var opts = {\n            type: this.chartType,\n            data: {\n                labels: this.labels,\n                datasets: datasets\n            },\n            options: options\n        };\n        if (typeof Chart === 'undefined') {\n            throw new Error('ng2-charts configuration issue: Embedding Chart.js lib is mandatory');\n        }\n        return new Chart(ctx, opts);\n    };\n    BaseChartDirective.prototype.getDatasets = function () {\n        var _this = this;\n        var datasets = void 0;\n        // in case if datasets is not provided, but data is present\n        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n            if (Array.isArray(this.data[0])) {\n                datasets = this.data.map(function (data, index) {\n                    return { data: data, label: _this.labels[index] || \"Label \" + index };\n                });\n            }\n            else {\n                datasets = [{ data: this.data, label: \"Label 0\" }];\n            }\n        }\n        if (this.datasets && this.datasets.length ||\n            (datasets && datasets.length)) {\n            datasets = (this.datasets || datasets)\n                .map(function (elm, index) {\n                var newElm = Object.assign({}, elm);\n                if (_this.colors && _this.colors.length) {\n                    Object.assign(newElm, _this.colors[index]);\n                }\n                else {\n                    Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));\n                }\n                return newElm;\n            });\n        }\n        if (!datasets) {\n            throw new Error(\"ng-charts configuration error,\\n      data or datasets field are required to render char \" + this.chartType);\n        }\n        return datasets;\n    };\n    BaseChartDirective.prototype.refresh = function () {\n        // if (this.options && this.options.responsive) {\n        //   setTimeout(() => this.refresh(), 50);\n        // }\n        // todo: remove this line, it is producing flickering\n        this.ngOnDestroy();\n        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);\n    };\n    BaseChartDirective.defaultColors = [\n        [255, 99, 132],\n        [54, 162, 235],\n        [255, 206, 86],\n        [231, 233, 237],\n        [75, 192, 192],\n        [151, 187, 205],\n        [220, 220, 220],\n        [247, 70, 74],\n        [70, 191, 189],\n        [253, 180, 92],\n        [148, 159, 177],\n        [77, 83, 96]\n    ];\n    BaseChartDirective.decorators = [\n        { type: core_1.Directive, args: [{ selector: 'canvas[baseChart]', exportAs: 'base-chart' },] },\n    ];\n    /** @nocollapse */\n    BaseChartDirective.ctorParameters = [\n        { type: core_1.ElementRef, },\n    ];\n    BaseChartDirective.propDecorators = {\n        'data': [{ type: core_1.Input },],\n        'datasets': [{ type: core_1.Input },],\n        'labels': [{ type: core_1.Input },],\n        'options': [{ type: core_1.Input },],\n        'chartType': [{ type: core_1.Input },],\n        'colors': [{ type: core_1.Input },],\n        'legend': [{ type: core_1.Input },],\n        'chartClick': [{ type: core_1.Output },],\n        'chartHover': [{ type: core_1.Output },],\n    };\n    return BaseChartDirective;\n}());\nexports.BaseChartDirective = BaseChartDirective;\nfunction rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction formatLineColor(colors) {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\nfunction formatBarColor(colors) {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\nfunction formatPieColors(colors) {\n    return {\n        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n        borderColor: colors.map(function () { return '#fff'; }),\n        pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n        pointBorderColor: colors.map(function () { return '#fff'; }),\n        pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n        pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n    };\n}\nfunction formatPolarAreaColors(colors) {\n    return {\n        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n        borderColor: colors.map(function (color) { return rgba(color, 1); }),\n        hoverBackgroundColor: colors.map(function (color) { return rgba(color, 0.8); }),\n        hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n    };\n}\nfunction getRandomColor() {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors for line|bar charts\n * @param index\n * @returns {number[]|Color}\n */\nfunction generateColor(index) {\n    return BaseChartDirective.defaultColors[index] || getRandomColor();\n}\n/**\n * Generate colors for pie|doughnut charts\n * @param count\n * @returns {Colors}\n */\nfunction generateColors(count) {\n    var colorsArr = new Array(count);\n    for (var i = 0; i < count; i++) {\n        colorsArr[i] = BaseChartDirective.defaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n/**\n * Generate colors by chart type\n * @param chartType\n * @param index\n * @param count\n * @returns {Color}\n */\nfunction getColors(chartType, index, count) {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\nvar ChartsModule = (function () {\n    function ChartsModule() {\n    }\n    ChartsModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    declarations: [\n                        BaseChartDirective\n                    ],\n                    exports: [\n                        BaseChartDirective\n                    ],\n                    imports: []\n                },] },\n    ];\n    /** @nocollapse */\n    ChartsModule.ctorParameters = [];\n    return ChartsModule;\n}());\nexports.ChartsModule = ChartsModule;\n\n\n/***/ },\n\n/***/ 1222:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(__webpack_require__(1221));\n\n\n/***/ },\n\n/***/ 1229:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return ChartlibComponent; });\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar ChartlibComponent = (function () {\n    function ChartlibComponent() {\n        this.globalChartOptions = {\n            responsive: true,\n            legend: {\n                display: false,\n                position: 'bottom'\n            }\n        };\n        // Bar\n        this.barChartLabels = ['1', '2', '3', '4', '5', '6', '7'];\n        this.barChartType = 'bar';\n        this.barChartLegend = true;\n        this.barChartData = [{\n                data: [6, 5, 8, 8, 5, 5, 4],\n                label: 'Series A',\n                borderWidth: 0\n            }, {\n                data: [5, 4, 4, 2, 6, 2, 5],\n                label: 'Series B',\n                borderWidth: 0\n            }];\n        this.barChartOptions = Object.assign({\n            scaleShowVerticalLines: false,\n            scales: {\n                xAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        }\n                    }],\n                yAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        position: 'left',\n                        ticks: {\n                            beginAtZero: true,\n                            suggestedMax: 9\n                        }\n                    }]\n            }\n        }, this.globalChartOptions);\n        // Horizontal Bar Chart\n        this.barChartHorizontalType = 'horizontalBar';\n        this.barChartHorizontalOptions = Object.assign({\n            scaleShowVerticalLines: false,\n            scales: {\n                xAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        ticks: {\n                            beginAtZero: true,\n                            suggestedMax: 9\n                        }\n                    }],\n                yAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        }\n                    }]\n            }\n        }, this.globalChartOptions);\n        // Bar Chart Stacked\n        this.barChartStackedOptions = Object.assign({\n            scaleShowVerticalLines: false,\n            tooltips: {\n                mode: 'index',\n                intersect: false\n            },\n            responsive: true,\n            scales: {\n                xAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        stacked: true,\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }],\n                yAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        stacked: true\n                    }]\n            }\n        }, this.globalChartOptions);\n        // Doughnut\n        this.doughnutChartColors = [{\n                backgroundColor: [\"#f44336\", \"#3f51b5\", \"#ffeb3b\", \"#4caf50\", \"#2196f\"]\n            }];\n        this.doughnutChartLabels = ['Download Sales', 'In-Store Sales', 'Mail-Order Sales'];\n        this.doughnutChartData = [350, 450, 100];\n        this.doughnutChartType = 'doughnut';\n        this.doughnutOptions = Object.assign({\n            elements: {\n                arc: {\n                    borderWidth: 0\n                }\n            }\n        }, this.globalChartOptions);\n        // Line Chart\n        this.lineChartData = [{\n                data: [6, 5, 8, 8, 5, 5, 4],\n                label: 'Series A',\n                borderWidth: 1\n            }, {\n                data: [5, 4, 4, 2, 6, 2, 5],\n                label: 'Series B',\n                borderWidth: 1\n            }];\n        this.lineChartLabels = ['1', '2', '3', '4', '5', '6', '7'];\n        this.lineChartOptions = Object.assign({\n            animation: false,\n            scales: {\n                xAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        }\n                    }],\n                yAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        ticks: {\n                            beginAtZero: true,\n                            suggestedMax: 9,\n                        }\n                    }]\n            }\n        }, this.globalChartOptions);\n        this.lineChartColors = [{\n                backgroundColor: \"#7986cb\",\n                borderColor: \"#3f51b5\",\n                pointBackgroundColor: \"#3f51b5\",\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n            }, {\n                backgroundColor: \"#eeeeee\",\n                borderColor: \"#e0e0e0\",\n                pointBackgroundColor: \"#e0e0e0\",\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(77,83,96,1)'\n            }, {\n                backgroundColor: 'rgba(148,159,177,0.2)',\n                borderColor: 'rgba(148,159,177,1)',\n                pointBackgroundColor: 'rgba(148,159,177,1)',\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n            }];\n        this.lineChartLegend = true;\n        this.lineChartType = 'line';\n        this.lineChartSteppedData = [{\n                data: [6, 5, 8, 8, 5, 5, 4],\n                label: 'Series A',\n                borderWidth: 1,\n                fill: false,\n                steppedLine: true\n            }, {\n                data: [5, 4, 4, 2, 6, 2, 5],\n                label: 'Series B',\n                borderWidth: 1,\n                fill: false,\n                steppedLine: true\n            }];\n        this.lineChartPointsData = [{\n                data: [6, 5, 8, 8, 5, 5, 4],\n                label: 'Series A',\n                borderWidth: 1,\n                fill: false,\n                pointRadius: 10,\n                pointHoverRadius: 15,\n                showLine: false\n            }, {\n                data: [5, 4, 4, 2, 6, 2, 5],\n                label: 'Series B',\n                borderWidth: 1,\n                fill: false,\n                pointRadius: 10,\n                pointHoverRadius: 15,\n                showLine: false\n            }];\n        this.lineChartPointsOptions = Object.assign({\n            scales: {\n                xAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        }\n                    }],\n                yAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        ticks: {\n                            beginAtZero: true,\n                            suggestedMax: 9,\n                        }\n                    }]\n            },\n            elements: {\n                point: {\n                    pointStyle: 'rectRot',\n                }\n            }\n        }, this.globalChartOptions);\n        // Bubble Chart\n        this.bubbleChartData = [{\n                data: [{\n                        x: 6,\n                        y: 5,\n                        r: 15,\n                    }, {\n                        x: 5,\n                        y: 4,\n                        r: 10,\n                    }, {\n                        x: 8,\n                        y: 4,\n                        r: 6,\n                    }, {\n                        x: 8,\n                        y: 4,\n                        r: 6,\n                    }, {\n                        x: 5,\n                        y: 14,\n                        r: 14,\n                    }, {\n                        x: 5,\n                        y: 6,\n                        r: 8,\n                    }, {\n                        x: 4,\n                        y: 2,\n                        r: 10,\n                    }],\n                label: 'Series A',\n                borderWidth: 1\n            }];\n        this.bubbleChartType = 'bubble';\n        // Combo Chart\n        this.ComboChartData = [{\n                data: [6, 5, 8, 8, 5, 5, 4],\n                label: 'Series A',\n                borderWidth: 1,\n                type: 'line',\n                fill: false\n            }, {\n                data: [5, 4, 4, 2, 6, 2, 5],\n                label: 'Series B',\n                borderWidth: 1,\n                type: 'bar',\n            }];\n        this.ComboChartLabels = ['1', '2', '3', '4', '5', '6', '7'];\n        this.ComboChartOptions = Object.assign({\n            animation: false,\n            scales: {\n                xAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        }\n                    }],\n                yAxes: [{\n                        gridLines: {\n                            color: 'rgba(0,0,0,0.02)',\n                            zeroLineColor: 'rgba(0,0,0,0.02)'\n                        },\n                        ticks: {\n                            beginAtZero: true,\n                            suggestedMax: 9,\n                        }\n                    }]\n            }\n        }, this.globalChartOptions);\n        // Pie\n        this.pieChartLabels = ['Download Sales', 'In-Store Sales', 'Mail Sales'];\n        this.pieChartData = [300, 500, 100];\n        this.pieChartType = 'pie';\n        // PolarArea\n        this.polarAreaChartLabels = ['Download Sales', 'In-Store Sales', 'Mail Sales', 'Telesales', 'Corporate Sales'];\n        this.polarAreaChartData = [300, 500, 100, 40, 120];\n        this.polarAreaLegend = true;\n        this.polarAreaChartType = 'polarArea';\n        // Radar\n        this.radarChartLabels = ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'];\n        this.radarChartData = [{\n                data: [65, 59, 90, 81, 56, 55, 40],\n                label: 'Series A'\n            }, {\n                data: [28, 48, 40, 19, 96, 27, 100],\n                label: 'Series B'\n            }];\n        this.radarChartType = 'radar';\n    }\n    ChartlibComponent = __decorate([\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Component\"])({\n            selector: 'app-chartlib',\n            template: __webpack_require__(1296),\n            styles: [__webpack_require__(1285)]\n        }), \n        __metadata('design:paramtypes', [])\n    ], ChartlibComponent);\n    return ChartlibComponent;\n}());\n//# sourceMappingURL=/Users/Shimanyi/Apps/ooscangular/app/src/chartlib.component.js.map\n\n/***/ },\n\n/***/ 1250:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chartlib_component__ = __webpack_require__(1229);\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return ChartlibRoutes; });\n\nvar ChartlibRoutes = [{\n        path: '',\n        component: __WEBPACK_IMPORTED_MODULE_0__chartlib_component__[\"a\" /* ChartlibComponent */]\n    }];\n//# sourceMappingURL=/Users/Shimanyi/Apps/ooscangular/app/src/chartlib.routing.js.map\n\n/***/ },\n\n/***/ 1285:\n/***/ function(module, exports) {\n\nmodule.exports = \"\"\n\n/***/ },\n\n/***/ 1296:\n/***/ function(module, exports) {\n\nmodule.exports = \"<div  fxLayout=\\\"row\\\"  fxLayoutWrap=\\\"wrap\\\">\\n  <!-- bar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bar</md-card-title>\\n      <md-card-subtitle>Basic</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"barChartData\\\"\\n          [labels]=\\\"barChartLabels\\\"\\n          [options]=\\\"barChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"barChartLegend\\\"\\n          [chartType]=\\\"barChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- bar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bar</md-card-title>\\n      <md-card-subtitle>Horizontal</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"barChartData\\\"\\n          [labels]=\\\"barChartLabels\\\"\\n          [options]=\\\"barChartHorizontalOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"barChartLegend\\\"\\n          [chartType]=\\\"barChartHorizontalType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- bar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bar</md-card-title>\\n      <md-card-subtitle>Stacked</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"barChartData\\\"\\n          [labels]=\\\"barChartLabels\\\"\\n          [options]=\\\"barChartStackedOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"barChartLegend\\\"\\n          [chartType]=\\\"barChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- line -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Line</md-card-title>\\n      <md-card-subtitle>Basic</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"lineChartData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"lineChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- line -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Line</md-card-title>\\n      <md-card-subtitle>Stepped</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"lineChartSteppedData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"lineChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- line -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Line</md-card-title>\\n      <md-card-subtitle>Points</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"lineChartPointsData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartPointsOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"lineChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- mixed -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Mixed</md-card-title>\\n      <md-card-subtitle>Mix different charts</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"ComboChartData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"ComboChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"barChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- bubble -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bubble</md-card-title>\\n      <md-card-subtitle>Display three dimensions of data</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"bubbleChartData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"bubbleChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- doughnut -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Doughnut</md-card-title>\\n      <md-card-subtitle>Pie chart with a cutout</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [data]=\\\"doughnutChartData\\\"\\n          [labels]=\\\"doughnutChartLabels\\\"\\n          [options]=\\\"doughnutOptions\\\"\\n          [colors]=\\\"doughnutChartColors\\\"\\n          [legend]=\\\"doughnutChartLegend\\\"\\n          [chartType]=\\\"doughnutChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- pie -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Pie</md-card-title>\\n      <md-card-subtitle>Without the cutout</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [data]=\\\"pieChartData\\\"\\n          [options]=\\\"doughnutOptions\\\"\\n          [colors]=\\\"doughnutChartColors\\\"\\n          [labels]=\\\"pieChartLabels\\\"\\n          [chartType]=\\\"pieChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- polar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Polar area</md-card-title>\\n      <md-card-subtitle>Each segment has the same angle</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [data]=\\\"polarAreaChartData\\\"\\n          [options]=\\\"doughnutOptions\\\"\\n          [colors]=\\\"doughnutChartColors\\\"\\n          [labels]=\\\"polarAreaChartLabels\\\"\\n          [legend]=\\\"polarAreaLegend\\\"\\n          [chartType]=\\\"polarAreaChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- radar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Radar</md-card-title>\\n      <md-card-subtitle>Multiple data points and the variation between them</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"radarChartData\\\"\\n          [options]=\\\"globalChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [labels]=\\\"radarChartLabels\\\"\\n          [chartType]=\\\"radarChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n</div>\"\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 7.acc824e7ff7d6096b328.chunk.js","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MdCardModule } from \"@angular/material\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\n\nimport { ChartsModule } from 'ng2-charts/ng2-charts';\nimport { ChartlibComponent } from './chartlib.component';\nimport { ChartlibRoutes } from './chartlib.routing';\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(ChartlibRoutes), ChartsModule, MdCardModule, FlexLayoutModule],\n  declarations: [ChartlibComponent]\n})\n\nexport class ChartlibModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/chartlib/chartlib.module.ts","\"use strict\";\nvar core_1 = require('@angular/core');\n/* tslint:disable-next-line */\nvar BaseChartDirective = (function () {\n    function BaseChartDirective(element) {\n        this.labels = [];\n        this.options = {};\n        this.chartClick = new core_1.EventEmitter();\n        this.chartHover = new core_1.EventEmitter();\n        this.initFlag = false;\n        this.element = element;\n    }\n    BaseChartDirective.prototype.ngOnInit = function () {\n        this.ctx = this.element.nativeElement.getContext('2d');\n        this.cvs = this.element.nativeElement;\n        this.initFlag = true;\n        if (this.data || this.datasets) {\n            this.refresh();\n        }\n    };\n    BaseChartDirective.prototype.ngOnChanges = function (changes) {\n        if (this.initFlag) {\n            // Check if the changes are in the data or datasets\n            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets') || changes.hasOwnProperty('labels')) {\n                this.chart.data.datasets = this.getDatasets();\n                this.chart.data.labels = this.labels;\n                this.chart.update();\n            }\n            else {\n                this.refresh();\n            }\n        }\n    };\n    BaseChartDirective.prototype.ngOnDestroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n    };\n    BaseChartDirective.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {\n        var _this = this;\n        var datasets = this.getDatasets();\n        var options = Object.assign({}, this.options);\n        if (this.legend === false) {\n            options.legend = { display: false };\n        }\n        // hock for onHover and onClick events\n        options.hover = options.hover || {};\n        if (!options.hover.onHover) {\n            options.hover.onHover = function (active) {\n                if (active && !active.length) {\n                    return;\n                }\n                _this.chartHover.emit({ active: active });\n            };\n        }\n        if (!options.onClick) {\n            options.onClick = function (event, active) {\n                _this.chartClick.emit({ event: event, active: active });\n            };\n        }\n        var opts = {\n            type: this.chartType,\n            data: {\n                labels: this.labels,\n                datasets: datasets\n            },\n            options: options\n        };\n        if (typeof Chart === 'undefined') {\n            throw new Error('ng2-charts configuration issue: Embedding Chart.js lib is mandatory');\n        }\n        return new Chart(ctx, opts);\n    };\n    BaseChartDirective.prototype.getDatasets = function () {\n        var _this = this;\n        var datasets = void 0;\n        // in case if datasets is not provided, but data is present\n        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n            if (Array.isArray(this.data[0])) {\n                datasets = this.data.map(function (data, index) {\n                    return { data: data, label: _this.labels[index] || \"Label \" + index };\n                });\n            }\n            else {\n                datasets = [{ data: this.data, label: \"Label 0\" }];\n            }\n        }\n        if (this.datasets && this.datasets.length ||\n            (datasets && datasets.length)) {\n            datasets = (this.datasets || datasets)\n                .map(function (elm, index) {\n                var newElm = Object.assign({}, elm);\n                if (_this.colors && _this.colors.length) {\n                    Object.assign(newElm, _this.colors[index]);\n                }\n                else {\n                    Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));\n                }\n                return newElm;\n            });\n        }\n        if (!datasets) {\n            throw new Error(\"ng-charts configuration error,\\n      data or datasets field are required to render char \" + this.chartType);\n        }\n        return datasets;\n    };\n    BaseChartDirective.prototype.refresh = function () {\n        // if (this.options && this.options.responsive) {\n        //   setTimeout(() => this.refresh(), 50);\n        // }\n        // todo: remove this line, it is producing flickering\n        this.ngOnDestroy();\n        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);\n    };\n    BaseChartDirective.defaultColors = [\n        [255, 99, 132],\n        [54, 162, 235],\n        [255, 206, 86],\n        [231, 233, 237],\n        [75, 192, 192],\n        [151, 187, 205],\n        [220, 220, 220],\n        [247, 70, 74],\n        [70, 191, 189],\n        [253, 180, 92],\n        [148, 159, 177],\n        [77, 83, 96]\n    ];\n    BaseChartDirective.decorators = [\n        { type: core_1.Directive, args: [{ selector: 'canvas[baseChart]', exportAs: 'base-chart' },] },\n    ];\n    /** @nocollapse */\n    BaseChartDirective.ctorParameters = [\n        { type: core_1.ElementRef, },\n    ];\n    BaseChartDirective.propDecorators = {\n        'data': [{ type: core_1.Input },],\n        'datasets': [{ type: core_1.Input },],\n        'labels': [{ type: core_1.Input },],\n        'options': [{ type: core_1.Input },],\n        'chartType': [{ type: core_1.Input },],\n        'colors': [{ type: core_1.Input },],\n        'legend': [{ type: core_1.Input },],\n        'chartClick': [{ type: core_1.Output },],\n        'chartHover': [{ type: core_1.Output },],\n    };\n    return BaseChartDirective;\n}());\nexports.BaseChartDirective = BaseChartDirective;\nfunction rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction formatLineColor(colors) {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\nfunction formatBarColor(colors) {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\nfunction formatPieColors(colors) {\n    return {\n        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n        borderColor: colors.map(function () { return '#fff'; }),\n        pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n        pointBorderColor: colors.map(function () { return '#fff'; }),\n        pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n        pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n    };\n}\nfunction formatPolarAreaColors(colors) {\n    return {\n        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n        borderColor: colors.map(function (color) { return rgba(color, 1); }),\n        hoverBackgroundColor: colors.map(function (color) { return rgba(color, 0.8); }),\n        hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n    };\n}\nfunction getRandomColor() {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors for line|bar charts\n * @param index\n * @returns {number[]|Color}\n */\nfunction generateColor(index) {\n    return BaseChartDirective.defaultColors[index] || getRandomColor();\n}\n/**\n * Generate colors for pie|doughnut charts\n * @param count\n * @returns {Colors}\n */\nfunction generateColors(count) {\n    var colorsArr = new Array(count);\n    for (var i = 0; i < count; i++) {\n        colorsArr[i] = BaseChartDirective.defaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n/**\n * Generate colors by chart type\n * @param chartType\n * @param index\n * @param count\n * @returns {Color}\n */\nfunction getColors(chartType, index, count) {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\nvar ChartsModule = (function () {\n    function ChartsModule() {\n    }\n    ChartsModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    declarations: [\n                        BaseChartDirective\n                    ],\n                    exports: [\n                        BaseChartDirective\n                    ],\n                    imports: []\n                },] },\n    ];\n    /** @nocollapse */\n    ChartsModule.ctorParameters = [];\n    return ChartsModule;\n}());\nexports.ChartsModule = ChartsModule;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ng2-charts/components/charts/charts.js\n// module id = 1221\n// module chunks = 6 7","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require('./components/charts/charts'));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ng2-charts/ng2-charts.js\n// module id = 1222\n// module chunks = 6 7","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-chartlib',\n  templateUrl: './chartlib.component.html',\n  styleUrls: ['./chartlib.component.scss']\n})\nexport class ChartlibComponent {\n  constructor() {}\n  public globalChartOptions: any = {\n      responsive: true,\n      legend: {\n        display: false,\n        position: 'bottom'\n      }\n    }\n  \n  // Bar\n  public barChartLabels: string[] = ['1', '2', '3', '4', '5', '6', '7'];\n  public barChartType: string = 'bar';\n  public barChartLegend: boolean = true;\n  public barChartData: any[] = [{\n    data: [6, 5, 8, 8, 5, 5, 4],\n    label: 'Series A',\n    borderWidth: 0\n  }, {\n    data: [5, 4, 4, 2, 6, 2, 5],\n    label: 'Series B',\n    borderWidth: 0\n  }];\n  public barChartOptions: any = Object.assign({\n    scaleShowVerticalLines: false,\n    scales: {\n      xAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        position: 'left',\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 9\n        }\n      }]\n    }\n  }, this.globalChartOptions);\n\n  // Horizontal Bar Chart\n  public barChartHorizontalType: string = 'horizontalBar';\n  public barChartHorizontalOptions: any = Object.assign({\n    scaleShowVerticalLines: false,\n    scales: {\n      xAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 9\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        }\n      }]\n    }\n  }, this.globalChartOptions);\n\n  // Bar Chart Stacked\n  public barChartStackedOptions: any = Object.assign({\n    scaleShowVerticalLines: false,\n    tooltips: {\n      mode: 'index',\n      intersect: false\n    },\n    responsive: true,\n    scales: {\n      xAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        stacked: true,\n        ticks: {\n          beginAtZero: true\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        stacked: true\n      }]\n    }\n  }, this.globalChartOptions);\n  \n  // Doughnut\n  public doughnutChartColors: any[] = [{\n    backgroundColor: [\"#f44336\", \"#3f51b5\", \"#ffeb3b\", \"#4caf50\", \"#2196f\"]\n  }];\n  public doughnutChartLabels: string[] = ['Download Sales', 'In-Store Sales', 'Mail-Order Sales'];\n  public doughnutChartData: number[] = [350, 450, 100];\n  public doughnutChartType: string = 'doughnut';\n  public doughnutOptions: any = Object.assign({\n    elements: {\n      arc: {\n        borderWidth: 0\n      }\n    }\n  }, this.globalChartOptions);\n  \n  // Line Chart\n  public lineChartData: Array < any > = [{\n    data: [6, 5, 8, 8, 5, 5, 4],\n    label: 'Series A',\n    borderWidth: 1\n  }, {\n    data: [5, 4, 4, 2, 6, 2, 5],\n    label: 'Series B',\n    borderWidth: 1\n  }];\n  public lineChartLabels: Array < any > = ['1', '2', '3', '4', '5', '6', '7'];\n  public lineChartOptions: any = Object.assign({\n    animation: false,\n    scales: {\n      xAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 9,\n        }\n      }]\n    }\n  }, this.globalChartOptions);\n  public lineChartColors: Array < any > = [{ // grey\n    backgroundColor: \"#7986cb\",\n    borderColor: \"#3f51b5\",\n    pointBackgroundColor: \"#3f51b5\",\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n  }, { // dark grey\n    backgroundColor: \"#eeeeee\",\n    borderColor: \"#e0e0e0\",\n    pointBackgroundColor: \"#e0e0e0\",\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(77,83,96,1)'\n  }, { // grey\n    backgroundColor: 'rgba(148,159,177,0.2)',\n    borderColor: 'rgba(148,159,177,1)',\n    pointBackgroundColor: 'rgba(148,159,177,1)',\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n  }];\n  public lineChartLegend: boolean = true;\n  public lineChartType: string = 'line';\n  public lineChartSteppedData: Array < any > = [{\n    data: [6, 5, 8, 8, 5, 5, 4],\n    label: 'Series A',\n    borderWidth: 1,\n    fill: false,\n    steppedLine: true\n  }, {\n    data: [5, 4, 4, 2, 6, 2, 5],\n    label: 'Series B',\n    borderWidth: 1,\n    fill: false,\n    steppedLine: true\n  }];\n  public lineChartPointsData: Array < any > = [{\n    data: [6, 5, 8, 8, 5, 5, 4],\n    label: 'Series A',\n    borderWidth: 1,\n    fill: false,\n    pointRadius: 10,\n    pointHoverRadius: 15,\n    showLine: false\n  }, {\n    data: [5, 4, 4, 2, 6, 2, 5],\n    label: 'Series B',\n    borderWidth: 1,\n    fill: false,\n    pointRadius: 10,\n    pointHoverRadius: 15,\n    showLine: false\n  }];\n  public lineChartPointsOptions: any = Object.assign({\n    scales: {\n      xAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 9,\n        }\n      }]\n    },\n    elements: {\n      point: {\n        pointStyle: 'rectRot',\n      }\n    }\n  }, this.globalChartOptions);\n\n  // Bubble Chart\n  public bubbleChartData: Array < any > = [{\n    data: [{\n      x: 6,\n      y: 5,\n      r: 15,\n    }, {\n      x: 5,\n      y: 4,\n      r: 10,\n    }, {\n      x: 8,\n      y: 4,\n      r: 6,\n    }, {\n      x: 8,\n      y: 4,\n      r: 6,\n    }, {\n      x: 5,\n      y: 14,\n      r: 14,\n    }, {\n      x: 5,\n      y: 6,\n      r: 8,\n    }, {\n      x: 4,\n      y: 2,\n      r: 10,\n    }],\n    label: 'Series A',\n    borderWidth: 1\n  }];\n  public bubbleChartType: string = 'bubble';\n\n  // Combo Chart\n  public ComboChartData: Array < any > = [{\n    data: [6, 5, 8, 8, 5, 5, 4],\n    label: 'Series A',\n    borderWidth: 1,\n    type: 'line',\n    fill: false\n  }, {\n    data: [5, 4, 4, 2, 6, 2, 5],\n    label: 'Series B',\n    borderWidth: 1,\n    type: 'bar',\n  }];\n  public ComboChartLabels: Array < any > = ['1', '2', '3', '4', '5', '6', '7'];\n  public ComboChartOptions: any = Object.assign({\n    animation: false,\n    scales: {\n      xAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          color: 'rgba(0,0,0,0.02)',\n          zeroLineColor: 'rgba(0,0,0,0.02)'\n        },\n        ticks: {\n          beginAtZero: true,\n          suggestedMax: 9,\n        }\n      }]\n    }\n  }, this.globalChartOptions);\n  \n  // Pie\n  public pieChartLabels: string[] = ['Download Sales', 'In-Store Sales', 'Mail Sales'];\n  public pieChartData: number[] = [300, 500, 100];\n  public pieChartType: string = 'pie';\n  \n  // PolarArea\n  public polarAreaChartLabels: string[] = ['Download Sales', 'In-Store Sales', 'Mail Sales', 'Telesales', 'Corporate Sales'];\n  public polarAreaChartData: any = [300, 500, 100, 40, 120];\n  public polarAreaLegend: boolean = true;\n  public polarAreaChartType: string = 'polarArea';\n  \n  // Radar\n  public radarChartLabels: string[] = ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'];\n  public radarChartData: any = [{\n    data: [65, 59, 90, 81, 56, 55, 40],\n    label: 'Series A'\n  }, {\n    data: [28, 48, 40, 19, 96, 27, 100],\n    label: 'Series B'\n  }];\n  public radarChartType: string = 'radar';\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/chartlib/chartlib.component.ts","import { Routes } from \"@angular/router\";\n\nimport { ChartlibComponent } from './chartlib.component';\n\nexport const ChartlibRoutes: Routes = [{\n  path: '',\n  component: ChartlibComponent\n}];\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/chartlib/chartlib.routing.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/chartlib/chartlib.component.scss\n// module id = 1285\n// module chunks = 7","module.exports = \"<div  fxLayout=\\\"row\\\"  fxLayoutWrap=\\\"wrap\\\">\\n  <!-- bar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bar</md-card-title>\\n      <md-card-subtitle>Basic</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"barChartData\\\"\\n          [labels]=\\\"barChartLabels\\\"\\n          [options]=\\\"barChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"barChartLegend\\\"\\n          [chartType]=\\\"barChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- bar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bar</md-card-title>\\n      <md-card-subtitle>Horizontal</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"barChartData\\\"\\n          [labels]=\\\"barChartLabels\\\"\\n          [options]=\\\"barChartHorizontalOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"barChartLegend\\\"\\n          [chartType]=\\\"barChartHorizontalType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- bar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bar</md-card-title>\\n      <md-card-subtitle>Stacked</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"barChartData\\\"\\n          [labels]=\\\"barChartLabels\\\"\\n          [options]=\\\"barChartStackedOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"barChartLegend\\\"\\n          [chartType]=\\\"barChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- line -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Line</md-card-title>\\n      <md-card-subtitle>Basic</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"lineChartData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"lineChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- line -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Line</md-card-title>\\n      <md-card-subtitle>Stepped</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"lineChartSteppedData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"lineChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- line -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Line</md-card-title>\\n      <md-card-subtitle>Points</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"lineChartPointsData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartPointsOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"lineChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- mixed -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Mixed</md-card-title>\\n      <md-card-subtitle>Mix different charts</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"ComboChartData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"ComboChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"barChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- bubble -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Bubble</md-card-title>\\n      <md-card-subtitle>Display three dimensions of data</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"bubbleChartData\\\"\\n          [labels]=\\\"lineChartLabels\\\"\\n          [options]=\\\"lineChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [legend]=\\\"lineChartLegend\\\"\\n          [chartType]=\\\"bubbleChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- doughnut -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Doughnut</md-card-title>\\n      <md-card-subtitle>Pie chart with a cutout</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [data]=\\\"doughnutChartData\\\"\\n          [labels]=\\\"doughnutChartLabels\\\"\\n          [options]=\\\"doughnutOptions\\\"\\n          [colors]=\\\"doughnutChartColors\\\"\\n          [legend]=\\\"doughnutChartLegend\\\"\\n          [chartType]=\\\"doughnutChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- pie -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Pie</md-card-title>\\n      <md-card-subtitle>Without the cutout</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [data]=\\\"pieChartData\\\"\\n          [options]=\\\"doughnutOptions\\\"\\n          [colors]=\\\"doughnutChartColors\\\"\\n          [labels]=\\\"pieChartLabels\\\"\\n          [chartType]=\\\"pieChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- polar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Polar area</md-card-title>\\n      <md-card-subtitle>Each segment has the same angle</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [data]=\\\"polarAreaChartData\\\"\\n          [options]=\\\"doughnutOptions\\\"\\n          [colors]=\\\"doughnutChartColors\\\"\\n          [labels]=\\\"polarAreaChartLabels\\\"\\n          [legend]=\\\"polarAreaLegend\\\"\\n          [chartType]=\\\"polarAreaChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n  <!-- radar -->\\n  <div fxFlex.gt-sm=\\\"33\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\n    <md-card>\\n      <md-card-title>Radar</md-card-title>\\n      <md-card-subtitle>Multiple data points and the variation between them</md-card-subtitle>\\n      <md-card-content>\\n        <canvas height=\\\"200\\\" baseChart class=\\\"chart\\\"\\n          [datasets]=\\\"radarChartData\\\"\\n          [options]=\\\"globalChartOptions\\\"\\n          [colors]=\\\"lineChartColors\\\"\\n          [labels]=\\\"radarChartLabels\\\"\\n          [chartType]=\\\"radarChartType\\\"></canvas>\\n      </md-card-content>\\n    </md-card>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/chartlib/chartlib.component.html\n// module id = 1296\n// module chunks = 7"],"sourceRoot":""}